#CURVATUREsolver : A fast customized optimization solver.
#
#Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.
#
#
#This program is distributed in the hope that it will be useful.
#EMBOTECH makes NO WARRANTIES with respect to the use of the software 
#without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
#PARTICULAR PURPOSE. 
#
#EMBOTECH shall not have any liability for any damage arising from the use
#of the software.
#
#This Agreement shall exclusively be governed by and interpreted in 
#accordance with the laws of Switzerland, excluding its principles
#of conflict of laws. The Courts of Zurich-City shall have exclusive 
#jurisdiction in case of any dispute.
#
#def __init__():
'''
a Python wrapper for a fast solver generated by FORCESPRO v5.1.0

   OUTPUT = CURVATUREsolver_py.CURVATUREsolver_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['lb'] - column vector of length 2952
       PARAMS['ub'] - column vector of length 2952
       PARAMS['hu'] - column vector of length 656
       PARAMS['hl'] - column vector of length 656
       PARAMS['x0'] - column vector of length 2952
       PARAMS['all_parameters'] - column vector of length 7872

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['x001'] - column vector of size 9
       OUTPUT['x002'] - column vector of size 9
       OUTPUT['x003'] - column vector of size 9
       OUTPUT['x004'] - column vector of size 9
       OUTPUT['x005'] - column vector of size 9
       OUTPUT['x006'] - column vector of size 9
       OUTPUT['x007'] - column vector of size 9
       OUTPUT['x008'] - column vector of size 9
       OUTPUT['x009'] - column vector of size 9
       OUTPUT['x010'] - column vector of size 9
       OUTPUT['x011'] - column vector of size 9
       OUTPUT['x012'] - column vector of size 9
       OUTPUT['x013'] - column vector of size 9
       OUTPUT['x014'] - column vector of size 9
       OUTPUT['x015'] - column vector of size 9
       OUTPUT['x016'] - column vector of size 9
       OUTPUT['x017'] - column vector of size 9
       OUTPUT['x018'] - column vector of size 9
       OUTPUT['x019'] - column vector of size 9
       OUTPUT['x020'] - column vector of size 9
       OUTPUT['x021'] - column vector of size 9
       OUTPUT['x022'] - column vector of size 9
       OUTPUT['x023'] - column vector of size 9
       OUTPUT['x024'] - column vector of size 9
       OUTPUT['x025'] - column vector of size 9
       OUTPUT['x026'] - column vector of size 9
       OUTPUT['x027'] - column vector of size 9
       OUTPUT['x028'] - column vector of size 9
       OUTPUT['x029'] - column vector of size 9
       OUTPUT['x030'] - column vector of size 9
       OUTPUT['x031'] - column vector of size 9
       OUTPUT['x032'] - column vector of size 9
       OUTPUT['x033'] - column vector of size 9
       OUTPUT['x034'] - column vector of size 9
       OUTPUT['x035'] - column vector of size 9
       OUTPUT['x036'] - column vector of size 9
       OUTPUT['x037'] - column vector of size 9
       OUTPUT['x038'] - column vector of size 9
       OUTPUT['x039'] - column vector of size 9
       OUTPUT['x040'] - column vector of size 9
       OUTPUT['x041'] - column vector of size 9
       OUTPUT['x042'] - column vector of size 9
       OUTPUT['x043'] - column vector of size 9
       OUTPUT['x044'] - column vector of size 9
       OUTPUT['x045'] - column vector of size 9
       OUTPUT['x046'] - column vector of size 9
       OUTPUT['x047'] - column vector of size 9
       OUTPUT['x048'] - column vector of size 9
       OUTPUT['x049'] - column vector of size 9
       OUTPUT['x050'] - column vector of size 9
       OUTPUT['x051'] - column vector of size 9
       OUTPUT['x052'] - column vector of size 9
       OUTPUT['x053'] - column vector of size 9
       OUTPUT['x054'] - column vector of size 9
       OUTPUT['x055'] - column vector of size 9
       OUTPUT['x056'] - column vector of size 9
       OUTPUT['x057'] - column vector of size 9
       OUTPUT['x058'] - column vector of size 9
       OUTPUT['x059'] - column vector of size 9
       OUTPUT['x060'] - column vector of size 9
       OUTPUT['x061'] - column vector of size 9
       OUTPUT['x062'] - column vector of size 9
       OUTPUT['x063'] - column vector of size 9
       OUTPUT['x064'] - column vector of size 9
       OUTPUT['x065'] - column vector of size 9
       OUTPUT['x066'] - column vector of size 9
       OUTPUT['x067'] - column vector of size 9
       OUTPUT['x068'] - column vector of size 9
       OUTPUT['x069'] - column vector of size 9
       OUTPUT['x070'] - column vector of size 9
       OUTPUT['x071'] - column vector of size 9
       OUTPUT['x072'] - column vector of size 9
       OUTPUT['x073'] - column vector of size 9
       OUTPUT['x074'] - column vector of size 9
       OUTPUT['x075'] - column vector of size 9
       OUTPUT['x076'] - column vector of size 9
       OUTPUT['x077'] - column vector of size 9
       OUTPUT['x078'] - column vector of size 9
       OUTPUT['x079'] - column vector of size 9
       OUTPUT['x080'] - column vector of size 9
       OUTPUT['x081'] - column vector of size 9
       OUTPUT['x082'] - column vector of size 9
       OUTPUT['x083'] - column vector of size 9
       OUTPUT['x084'] - column vector of size 9
       OUTPUT['x085'] - column vector of size 9
       OUTPUT['x086'] - column vector of size 9
       OUTPUT['x087'] - column vector of size 9
       OUTPUT['x088'] - column vector of size 9
       OUTPUT['x089'] - column vector of size 9
       OUTPUT['x090'] - column vector of size 9
       OUTPUT['x091'] - column vector of size 9
       OUTPUT['x092'] - column vector of size 9
       OUTPUT['x093'] - column vector of size 9
       OUTPUT['x094'] - column vector of size 9
       OUTPUT['x095'] - column vector of size 9
       OUTPUT['x096'] - column vector of size 9
       OUTPUT['x097'] - column vector of size 9
       OUTPUT['x098'] - column vector of size 9
       OUTPUT['x099'] - column vector of size 9
       OUTPUT['x100'] - column vector of size 9
       OUTPUT['x101'] - column vector of size 9
       OUTPUT['x102'] - column vector of size 9
       OUTPUT['x103'] - column vector of size 9
       OUTPUT['x104'] - column vector of size 9
       OUTPUT['x105'] - column vector of size 9
       OUTPUT['x106'] - column vector of size 9
       OUTPUT['x107'] - column vector of size 9
       OUTPUT['x108'] - column vector of size 9
       OUTPUT['x109'] - column vector of size 9
       OUTPUT['x110'] - column vector of size 9
       OUTPUT['x111'] - column vector of size 9
       OUTPUT['x112'] - column vector of size 9
       OUTPUT['x113'] - column vector of size 9
       OUTPUT['x114'] - column vector of size 9
       OUTPUT['x115'] - column vector of size 9
       OUTPUT['x116'] - column vector of size 9
       OUTPUT['x117'] - column vector of size 9
       OUTPUT['x118'] - column vector of size 9
       OUTPUT['x119'] - column vector of size 9
       OUTPUT['x120'] - column vector of size 9
       OUTPUT['x121'] - column vector of size 9
       OUTPUT['x122'] - column vector of size 9
       OUTPUT['x123'] - column vector of size 9
       OUTPUT['x124'] - column vector of size 9
       OUTPUT['x125'] - column vector of size 9
       OUTPUT['x126'] - column vector of size 9
       OUTPUT['x127'] - column vector of size 9
       OUTPUT['x128'] - column vector of size 9
       OUTPUT['x129'] - column vector of size 9
       OUTPUT['x130'] - column vector of size 9
       OUTPUT['x131'] - column vector of size 9
       OUTPUT['x132'] - column vector of size 9
       OUTPUT['x133'] - column vector of size 9
       OUTPUT['x134'] - column vector of size 9
       OUTPUT['x135'] - column vector of size 9
       OUTPUT['x136'] - column vector of size 9
       OUTPUT['x137'] - column vector of size 9
       OUTPUT['x138'] - column vector of size 9
       OUTPUT['x139'] - column vector of size 9
       OUTPUT['x140'] - column vector of size 9
       OUTPUT['x141'] - column vector of size 9
       OUTPUT['x142'] - column vector of size 9
       OUTPUT['x143'] - column vector of size 9
       OUTPUT['x144'] - column vector of size 9
       OUTPUT['x145'] - column vector of size 9
       OUTPUT['x146'] - column vector of size 9
       OUTPUT['x147'] - column vector of size 9
       OUTPUT['x148'] - column vector of size 9
       OUTPUT['x149'] - column vector of size 9
       OUTPUT['x150'] - column vector of size 9
       OUTPUT['x151'] - column vector of size 9
       OUTPUT['x152'] - column vector of size 9
       OUTPUT['x153'] - column vector of size 9
       OUTPUT['x154'] - column vector of size 9
       OUTPUT['x155'] - column vector of size 9
       OUTPUT['x156'] - column vector of size 9
       OUTPUT['x157'] - column vector of size 9
       OUTPUT['x158'] - column vector of size 9
       OUTPUT['x159'] - column vector of size 9
       OUTPUT['x160'] - column vector of size 9
       OUTPUT['x161'] - column vector of size 9
       OUTPUT['x162'] - column vector of size 9
       OUTPUT['x163'] - column vector of size 9
       OUTPUT['x164'] - column vector of size 9
       OUTPUT['x165'] - column vector of size 9
       OUTPUT['x166'] - column vector of size 9
       OUTPUT['x167'] - column vector of size 9
       OUTPUT['x168'] - column vector of size 9
       OUTPUT['x169'] - column vector of size 9
       OUTPUT['x170'] - column vector of size 9
       OUTPUT['x171'] - column vector of size 9
       OUTPUT['x172'] - column vector of size 9
       OUTPUT['x173'] - column vector of size 9
       OUTPUT['x174'] - column vector of size 9
       OUTPUT['x175'] - column vector of size 9
       OUTPUT['x176'] - column vector of size 9
       OUTPUT['x177'] - column vector of size 9
       OUTPUT['x178'] - column vector of size 9
       OUTPUT['x179'] - column vector of size 9
       OUTPUT['x180'] - column vector of size 9
       OUTPUT['x181'] - column vector of size 9
       OUTPUT['x182'] - column vector of size 9
       OUTPUT['x183'] - column vector of size 9
       OUTPUT['x184'] - column vector of size 9
       OUTPUT['x185'] - column vector of size 9
       OUTPUT['x186'] - column vector of size 9
       OUTPUT['x187'] - column vector of size 9
       OUTPUT['x188'] - column vector of size 9
       OUTPUT['x189'] - column vector of size 9
       OUTPUT['x190'] - column vector of size 9
       OUTPUT['x191'] - column vector of size 9
       OUTPUT['x192'] - column vector of size 9
       OUTPUT['x193'] - column vector of size 9
       OUTPUT['x194'] - column vector of size 9
       OUTPUT['x195'] - column vector of size 9
       OUTPUT['x196'] - column vector of size 9
       OUTPUT['x197'] - column vector of size 9
       OUTPUT['x198'] - column vector of size 9
       OUTPUT['x199'] - column vector of size 9
       OUTPUT['x200'] - column vector of size 9
       OUTPUT['x201'] - column vector of size 9
       OUTPUT['x202'] - column vector of size 9
       OUTPUT['x203'] - column vector of size 9
       OUTPUT['x204'] - column vector of size 9
       OUTPUT['x205'] - column vector of size 9
       OUTPUT['x206'] - column vector of size 9
       OUTPUT['x207'] - column vector of size 9
       OUTPUT['x208'] - column vector of size 9
       OUTPUT['x209'] - column vector of size 9
       OUTPUT['x210'] - column vector of size 9
       OUTPUT['x211'] - column vector of size 9
       OUTPUT['x212'] - column vector of size 9
       OUTPUT['x213'] - column vector of size 9
       OUTPUT['x214'] - column vector of size 9
       OUTPUT['x215'] - column vector of size 9
       OUTPUT['x216'] - column vector of size 9
       OUTPUT['x217'] - column vector of size 9
       OUTPUT['x218'] - column vector of size 9
       OUTPUT['x219'] - column vector of size 9
       OUTPUT['x220'] - column vector of size 9
       OUTPUT['x221'] - column vector of size 9
       OUTPUT['x222'] - column vector of size 9
       OUTPUT['x223'] - column vector of size 9
       OUTPUT['x224'] - column vector of size 9
       OUTPUT['x225'] - column vector of size 9
       OUTPUT['x226'] - column vector of size 9
       OUTPUT['x227'] - column vector of size 9
       OUTPUT['x228'] - column vector of size 9
       OUTPUT['x229'] - column vector of size 9
       OUTPUT['x230'] - column vector of size 9
       OUTPUT['x231'] - column vector of size 9
       OUTPUT['x232'] - column vector of size 9
       OUTPUT['x233'] - column vector of size 9
       OUTPUT['x234'] - column vector of size 9
       OUTPUT['x235'] - column vector of size 9
       OUTPUT['x236'] - column vector of size 9
       OUTPUT['x237'] - column vector of size 9
       OUTPUT['x238'] - column vector of size 9
       OUTPUT['x239'] - column vector of size 9
       OUTPUT['x240'] - column vector of size 9
       OUTPUT['x241'] - column vector of size 9
       OUTPUT['x242'] - column vector of size 9
       OUTPUT['x243'] - column vector of size 9
       OUTPUT['x244'] - column vector of size 9
       OUTPUT['x245'] - column vector of size 9
       OUTPUT['x246'] - column vector of size 9
       OUTPUT['x247'] - column vector of size 9
       OUTPUT['x248'] - column vector of size 9
       OUTPUT['x249'] - column vector of size 9
       OUTPUT['x250'] - column vector of size 9
       OUTPUT['x251'] - column vector of size 9
       OUTPUT['x252'] - column vector of size 9
       OUTPUT['x253'] - column vector of size 9
       OUTPUT['x254'] - column vector of size 9
       OUTPUT['x255'] - column vector of size 9
       OUTPUT['x256'] - column vector of size 9
       OUTPUT['x257'] - column vector of size 9
       OUTPUT['x258'] - column vector of size 9
       OUTPUT['x259'] - column vector of size 9
       OUTPUT['x260'] - column vector of size 9
       OUTPUT['x261'] - column vector of size 9
       OUTPUT['x262'] - column vector of size 9
       OUTPUT['x263'] - column vector of size 9
       OUTPUT['x264'] - column vector of size 9
       OUTPUT['x265'] - column vector of size 9
       OUTPUT['x266'] - column vector of size 9
       OUTPUT['x267'] - column vector of size 9
       OUTPUT['x268'] - column vector of size 9
       OUTPUT['x269'] - column vector of size 9
       OUTPUT['x270'] - column vector of size 9
       OUTPUT['x271'] - column vector of size 9
       OUTPUT['x272'] - column vector of size 9
       OUTPUT['x273'] - column vector of size 9
       OUTPUT['x274'] - column vector of size 9
       OUTPUT['x275'] - column vector of size 9
       OUTPUT['x276'] - column vector of size 9
       OUTPUT['x277'] - column vector of size 9
       OUTPUT['x278'] - column vector of size 9
       OUTPUT['x279'] - column vector of size 9
       OUTPUT['x280'] - column vector of size 9
       OUTPUT['x281'] - column vector of size 9
       OUTPUT['x282'] - column vector of size 9
       OUTPUT['x283'] - column vector of size 9
       OUTPUT['x284'] - column vector of size 9
       OUTPUT['x285'] - column vector of size 9
       OUTPUT['x286'] - column vector of size 9
       OUTPUT['x287'] - column vector of size 9
       OUTPUT['x288'] - column vector of size 9
       OUTPUT['x289'] - column vector of size 9
       OUTPUT['x290'] - column vector of size 9
       OUTPUT['x291'] - column vector of size 9
       OUTPUT['x292'] - column vector of size 9
       OUTPUT['x293'] - column vector of size 9
       OUTPUT['x294'] - column vector of size 9
       OUTPUT['x295'] - column vector of size 9
       OUTPUT['x296'] - column vector of size 9
       OUTPUT['x297'] - column vector of size 9
       OUTPUT['x298'] - column vector of size 9
       OUTPUT['x299'] - column vector of size 9
       OUTPUT['x300'] - column vector of size 9
       OUTPUT['x301'] - column vector of size 9
       OUTPUT['x302'] - column vector of size 9
       OUTPUT['x303'] - column vector of size 9
       OUTPUT['x304'] - column vector of size 9
       OUTPUT['x305'] - column vector of size 9
       OUTPUT['x306'] - column vector of size 9
       OUTPUT['x307'] - column vector of size 9
       OUTPUT['x308'] - column vector of size 9
       OUTPUT['x309'] - column vector of size 9
       OUTPUT['x310'] - column vector of size 9
       OUTPUT['x311'] - column vector of size 9
       OUTPUT['x312'] - column vector of size 9
       OUTPUT['x313'] - column vector of size 9
       OUTPUT['x314'] - column vector of size 9
       OUTPUT['x315'] - column vector of size 9
       OUTPUT['x316'] - column vector of size 9
       OUTPUT['x317'] - column vector of size 9
       OUTPUT['x318'] - column vector of size 9
       OUTPUT['x319'] - column vector of size 9
       OUTPUT['x320'] - column vector of size 9
       OUTPUT['x321'] - column vector of size 9
       OUTPUT['x322'] - column vector of size 9
       OUTPUT['x323'] - column vector of size 9
       OUTPUT['x324'] - column vector of size 9
       OUTPUT['x325'] - column vector of size 9
       OUTPUT['x326'] - column vector of size 9
       OUTPUT['x327'] - column vector of size 9
       OUTPUT['x328'] - column vector of size 9

   [OUTPUT, EXITFLAG] = CURVATUREsolver_py.CURVATUREsolver_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = CURVATUREsolver_py.CURVATUREsolver_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.rsnorm    - norm of stationarity condition
       INFO.rcompnorm    - max of all complementarity violations
       INFO.pobj      - primal objective
       INFO.mu        - duality measure
       INFO.solvetime - Time needed for solve (wall clock time)
       INFO.fevalstime - Time needed for function evaluations (wall clock time)

 See also COPYING

'''

import ctypes
import os
import numpy as np
import numpy.ctypeslib as npct
import sys

#_lib = ctypes.CDLL(os.path.join(os.getcwd(),'CURVATUREsolver/lib/CURVATUREsolver.so')) 
try:
    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'CURVATUREsolver/lib/CURVATUREsolver_withModel.so'))
    csolver = getattr(_lib,'CURVATUREsolver_solve')
except:
    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'CURVATUREsolver/lib/libCURVATUREsolver_withModel.so'))
    csolver = getattr(_lib,'CURVATUREsolver_solve')

class CURVATUREsolver_params_ctypes(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('lb', ctypes.c_double * 2952),
('ub', ctypes.c_double * 2952),
('hu', ctypes.c_double * 656),
('hl', ctypes.c_double * 656),
('x0', ctypes.c_double * 2952),
('all_parameters', ctypes.c_double * 7872),
]

CURVATUREsolver_params = {'lb' : np.array([]),
'ub' : np.array([]),
'hu' : np.array([]),
'hl' : np.array([]),
'x0' : np.array([]),
'all_parameters' : np.array([]),
}
params = {'lb' : np.array([]),
'ub' : np.array([]),
'hu' : np.array([]),
'hl' : np.array([]),
'x0' : np.array([]),
'all_parameters' : np.array([]),
}
CURVATUREsolver_params_types = {'lb' : np.float64,
'ub' : np.float64,
'hu' : np.float64,
'hl' : np.float64,
'x0' : np.float64,
'all_parameters' : np.float64,
}

class CURVATUREsolver_outputs_ctypes(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('x001', ctypes.c_double * 9),
('x002', ctypes.c_double * 9),
('x003', ctypes.c_double * 9),
('x004', ctypes.c_double * 9),
('x005', ctypes.c_double * 9),
('x006', ctypes.c_double * 9),
('x007', ctypes.c_double * 9),
('x008', ctypes.c_double * 9),
('x009', ctypes.c_double * 9),
('x010', ctypes.c_double * 9),
('x011', ctypes.c_double * 9),
('x012', ctypes.c_double * 9),
('x013', ctypes.c_double * 9),
('x014', ctypes.c_double * 9),
('x015', ctypes.c_double * 9),
('x016', ctypes.c_double * 9),
('x017', ctypes.c_double * 9),
('x018', ctypes.c_double * 9),
('x019', ctypes.c_double * 9),
('x020', ctypes.c_double * 9),
('x021', ctypes.c_double * 9),
('x022', ctypes.c_double * 9),
('x023', ctypes.c_double * 9),
('x024', ctypes.c_double * 9),
('x025', ctypes.c_double * 9),
('x026', ctypes.c_double * 9),
('x027', ctypes.c_double * 9),
('x028', ctypes.c_double * 9),
('x029', ctypes.c_double * 9),
('x030', ctypes.c_double * 9),
('x031', ctypes.c_double * 9),
('x032', ctypes.c_double * 9),
('x033', ctypes.c_double * 9),
('x034', ctypes.c_double * 9),
('x035', ctypes.c_double * 9),
('x036', ctypes.c_double * 9),
('x037', ctypes.c_double * 9),
('x038', ctypes.c_double * 9),
('x039', ctypes.c_double * 9),
('x040', ctypes.c_double * 9),
('x041', ctypes.c_double * 9),
('x042', ctypes.c_double * 9),
('x043', ctypes.c_double * 9),
('x044', ctypes.c_double * 9),
('x045', ctypes.c_double * 9),
('x046', ctypes.c_double * 9),
('x047', ctypes.c_double * 9),
('x048', ctypes.c_double * 9),
('x049', ctypes.c_double * 9),
('x050', ctypes.c_double * 9),
('x051', ctypes.c_double * 9),
('x052', ctypes.c_double * 9),
('x053', ctypes.c_double * 9),
('x054', ctypes.c_double * 9),
('x055', ctypes.c_double * 9),
('x056', ctypes.c_double * 9),
('x057', ctypes.c_double * 9),
('x058', ctypes.c_double * 9),
('x059', ctypes.c_double * 9),
('x060', ctypes.c_double * 9),
('x061', ctypes.c_double * 9),
('x062', ctypes.c_double * 9),
('x063', ctypes.c_double * 9),
('x064', ctypes.c_double * 9),
('x065', ctypes.c_double * 9),
('x066', ctypes.c_double * 9),
('x067', ctypes.c_double * 9),
('x068', ctypes.c_double * 9),
('x069', ctypes.c_double * 9),
('x070', ctypes.c_double * 9),
('x071', ctypes.c_double * 9),
('x072', ctypes.c_double * 9),
('x073', ctypes.c_double * 9),
('x074', ctypes.c_double * 9),
('x075', ctypes.c_double * 9),
('x076', ctypes.c_double * 9),
('x077', ctypes.c_double * 9),
('x078', ctypes.c_double * 9),
('x079', ctypes.c_double * 9),
('x080', ctypes.c_double * 9),
('x081', ctypes.c_double * 9),
('x082', ctypes.c_double * 9),
('x083', ctypes.c_double * 9),
('x084', ctypes.c_double * 9),
('x085', ctypes.c_double * 9),
('x086', ctypes.c_double * 9),
('x087', ctypes.c_double * 9),
('x088', ctypes.c_double * 9),
('x089', ctypes.c_double * 9),
('x090', ctypes.c_double * 9),
('x091', ctypes.c_double * 9),
('x092', ctypes.c_double * 9),
('x093', ctypes.c_double * 9),
('x094', ctypes.c_double * 9),
('x095', ctypes.c_double * 9),
('x096', ctypes.c_double * 9),
('x097', ctypes.c_double * 9),
('x098', ctypes.c_double * 9),
('x099', ctypes.c_double * 9),
('x100', ctypes.c_double * 9),
('x101', ctypes.c_double * 9),
('x102', ctypes.c_double * 9),
('x103', ctypes.c_double * 9),
('x104', ctypes.c_double * 9),
('x105', ctypes.c_double * 9),
('x106', ctypes.c_double * 9),
('x107', ctypes.c_double * 9),
('x108', ctypes.c_double * 9),
('x109', ctypes.c_double * 9),
('x110', ctypes.c_double * 9),
('x111', ctypes.c_double * 9),
('x112', ctypes.c_double * 9),
('x113', ctypes.c_double * 9),
('x114', ctypes.c_double * 9),
('x115', ctypes.c_double * 9),
('x116', ctypes.c_double * 9),
('x117', ctypes.c_double * 9),
('x118', ctypes.c_double * 9),
('x119', ctypes.c_double * 9),
('x120', ctypes.c_double * 9),
('x121', ctypes.c_double * 9),
('x122', ctypes.c_double * 9),
('x123', ctypes.c_double * 9),
('x124', ctypes.c_double * 9),
('x125', ctypes.c_double * 9),
('x126', ctypes.c_double * 9),
('x127', ctypes.c_double * 9),
('x128', ctypes.c_double * 9),
('x129', ctypes.c_double * 9),
('x130', ctypes.c_double * 9),
('x131', ctypes.c_double * 9),
('x132', ctypes.c_double * 9),
('x133', ctypes.c_double * 9),
('x134', ctypes.c_double * 9),
('x135', ctypes.c_double * 9),
('x136', ctypes.c_double * 9),
('x137', ctypes.c_double * 9),
('x138', ctypes.c_double * 9),
('x139', ctypes.c_double * 9),
('x140', ctypes.c_double * 9),
('x141', ctypes.c_double * 9),
('x142', ctypes.c_double * 9),
('x143', ctypes.c_double * 9),
('x144', ctypes.c_double * 9),
('x145', ctypes.c_double * 9),
('x146', ctypes.c_double * 9),
('x147', ctypes.c_double * 9),
('x148', ctypes.c_double * 9),
('x149', ctypes.c_double * 9),
('x150', ctypes.c_double * 9),
('x151', ctypes.c_double * 9),
('x152', ctypes.c_double * 9),
('x153', ctypes.c_double * 9),
('x154', ctypes.c_double * 9),
('x155', ctypes.c_double * 9),
('x156', ctypes.c_double * 9),
('x157', ctypes.c_double * 9),
('x158', ctypes.c_double * 9),
('x159', ctypes.c_double * 9),
('x160', ctypes.c_double * 9),
('x161', ctypes.c_double * 9),
('x162', ctypes.c_double * 9),
('x163', ctypes.c_double * 9),
('x164', ctypes.c_double * 9),
('x165', ctypes.c_double * 9),
('x166', ctypes.c_double * 9),
('x167', ctypes.c_double * 9),
('x168', ctypes.c_double * 9),
('x169', ctypes.c_double * 9),
('x170', ctypes.c_double * 9),
('x171', ctypes.c_double * 9),
('x172', ctypes.c_double * 9),
('x173', ctypes.c_double * 9),
('x174', ctypes.c_double * 9),
('x175', ctypes.c_double * 9),
('x176', ctypes.c_double * 9),
('x177', ctypes.c_double * 9),
('x178', ctypes.c_double * 9),
('x179', ctypes.c_double * 9),
('x180', ctypes.c_double * 9),
('x181', ctypes.c_double * 9),
('x182', ctypes.c_double * 9),
('x183', ctypes.c_double * 9),
('x184', ctypes.c_double * 9),
('x185', ctypes.c_double * 9),
('x186', ctypes.c_double * 9),
('x187', ctypes.c_double * 9),
('x188', ctypes.c_double * 9),
('x189', ctypes.c_double * 9),
('x190', ctypes.c_double * 9),
('x191', ctypes.c_double * 9),
('x192', ctypes.c_double * 9),
('x193', ctypes.c_double * 9),
('x194', ctypes.c_double * 9),
('x195', ctypes.c_double * 9),
('x196', ctypes.c_double * 9),
('x197', ctypes.c_double * 9),
('x198', ctypes.c_double * 9),
('x199', ctypes.c_double * 9),
('x200', ctypes.c_double * 9),
('x201', ctypes.c_double * 9),
('x202', ctypes.c_double * 9),
('x203', ctypes.c_double * 9),
('x204', ctypes.c_double * 9),
('x205', ctypes.c_double * 9),
('x206', ctypes.c_double * 9),
('x207', ctypes.c_double * 9),
('x208', ctypes.c_double * 9),
('x209', ctypes.c_double * 9),
('x210', ctypes.c_double * 9),
('x211', ctypes.c_double * 9),
('x212', ctypes.c_double * 9),
('x213', ctypes.c_double * 9),
('x214', ctypes.c_double * 9),
('x215', ctypes.c_double * 9),
('x216', ctypes.c_double * 9),
('x217', ctypes.c_double * 9),
('x218', ctypes.c_double * 9),
('x219', ctypes.c_double * 9),
('x220', ctypes.c_double * 9),
('x221', ctypes.c_double * 9),
('x222', ctypes.c_double * 9),
('x223', ctypes.c_double * 9),
('x224', ctypes.c_double * 9),
('x225', ctypes.c_double * 9),
('x226', ctypes.c_double * 9),
('x227', ctypes.c_double * 9),
('x228', ctypes.c_double * 9),
('x229', ctypes.c_double * 9),
('x230', ctypes.c_double * 9),
('x231', ctypes.c_double * 9),
('x232', ctypes.c_double * 9),
('x233', ctypes.c_double * 9),
('x234', ctypes.c_double * 9),
('x235', ctypes.c_double * 9),
('x236', ctypes.c_double * 9),
('x237', ctypes.c_double * 9),
('x238', ctypes.c_double * 9),
('x239', ctypes.c_double * 9),
('x240', ctypes.c_double * 9),
('x241', ctypes.c_double * 9),
('x242', ctypes.c_double * 9),
('x243', ctypes.c_double * 9),
('x244', ctypes.c_double * 9),
('x245', ctypes.c_double * 9),
('x246', ctypes.c_double * 9),
('x247', ctypes.c_double * 9),
('x248', ctypes.c_double * 9),
('x249', ctypes.c_double * 9),
('x250', ctypes.c_double * 9),
('x251', ctypes.c_double * 9),
('x252', ctypes.c_double * 9),
('x253', ctypes.c_double * 9),
('x254', ctypes.c_double * 9),
('x255', ctypes.c_double * 9),
('x256', ctypes.c_double * 9),
('x257', ctypes.c_double * 9),
('x258', ctypes.c_double * 9),
('x259', ctypes.c_double * 9),
('x260', ctypes.c_double * 9),
('x261', ctypes.c_double * 9),
('x262', ctypes.c_double * 9),
('x263', ctypes.c_double * 9),
('x264', ctypes.c_double * 9),
('x265', ctypes.c_double * 9),
('x266', ctypes.c_double * 9),
('x267', ctypes.c_double * 9),
('x268', ctypes.c_double * 9),
('x269', ctypes.c_double * 9),
('x270', ctypes.c_double * 9),
('x271', ctypes.c_double * 9),
('x272', ctypes.c_double * 9),
('x273', ctypes.c_double * 9),
('x274', ctypes.c_double * 9),
('x275', ctypes.c_double * 9),
('x276', ctypes.c_double * 9),
('x277', ctypes.c_double * 9),
('x278', ctypes.c_double * 9),
('x279', ctypes.c_double * 9),
('x280', ctypes.c_double * 9),
('x281', ctypes.c_double * 9),
('x282', ctypes.c_double * 9),
('x283', ctypes.c_double * 9),
('x284', ctypes.c_double * 9),
('x285', ctypes.c_double * 9),
('x286', ctypes.c_double * 9),
('x287', ctypes.c_double * 9),
('x288', ctypes.c_double * 9),
('x289', ctypes.c_double * 9),
('x290', ctypes.c_double * 9),
('x291', ctypes.c_double * 9),
('x292', ctypes.c_double * 9),
('x293', ctypes.c_double * 9),
('x294', ctypes.c_double * 9),
('x295', ctypes.c_double * 9),
('x296', ctypes.c_double * 9),
('x297', ctypes.c_double * 9),
('x298', ctypes.c_double * 9),
('x299', ctypes.c_double * 9),
('x300', ctypes.c_double * 9),
('x301', ctypes.c_double * 9),
('x302', ctypes.c_double * 9),
('x303', ctypes.c_double * 9),
('x304', ctypes.c_double * 9),
('x305', ctypes.c_double * 9),
('x306', ctypes.c_double * 9),
('x307', ctypes.c_double * 9),
('x308', ctypes.c_double * 9),
('x309', ctypes.c_double * 9),
('x310', ctypes.c_double * 9),
('x311', ctypes.c_double * 9),
('x312', ctypes.c_double * 9),
('x313', ctypes.c_double * 9),
('x314', ctypes.c_double * 9),
('x315', ctypes.c_double * 9),
('x316', ctypes.c_double * 9),
('x317', ctypes.c_double * 9),
('x318', ctypes.c_double * 9),
('x319', ctypes.c_double * 9),
('x320', ctypes.c_double * 9),
('x321', ctypes.c_double * 9),
('x322', ctypes.c_double * 9),
('x323', ctypes.c_double * 9),
('x324', ctypes.c_double * 9),
('x325', ctypes.c_double * 9),
('x326', ctypes.c_double * 9),
('x327', ctypes.c_double * 9),
('x328', ctypes.c_double * 9),
]

CURVATUREsolver_outputs = {'x001' : np.array([]),
'x002' : np.array([]),
'x003' : np.array([]),
'x004' : np.array([]),
'x005' : np.array([]),
'x006' : np.array([]),
'x007' : np.array([]),
'x008' : np.array([]),
'x009' : np.array([]),
'x010' : np.array([]),
'x011' : np.array([]),
'x012' : np.array([]),
'x013' : np.array([]),
'x014' : np.array([]),
'x015' : np.array([]),
'x016' : np.array([]),
'x017' : np.array([]),
'x018' : np.array([]),
'x019' : np.array([]),
'x020' : np.array([]),
'x021' : np.array([]),
'x022' : np.array([]),
'x023' : np.array([]),
'x024' : np.array([]),
'x025' : np.array([]),
'x026' : np.array([]),
'x027' : np.array([]),
'x028' : np.array([]),
'x029' : np.array([]),
'x030' : np.array([]),
'x031' : np.array([]),
'x032' : np.array([]),
'x033' : np.array([]),
'x034' : np.array([]),
'x035' : np.array([]),
'x036' : np.array([]),
'x037' : np.array([]),
'x038' : np.array([]),
'x039' : np.array([]),
'x040' : np.array([]),
'x041' : np.array([]),
'x042' : np.array([]),
'x043' : np.array([]),
'x044' : np.array([]),
'x045' : np.array([]),
'x046' : np.array([]),
'x047' : np.array([]),
'x048' : np.array([]),
'x049' : np.array([]),
'x050' : np.array([]),
'x051' : np.array([]),
'x052' : np.array([]),
'x053' : np.array([]),
'x054' : np.array([]),
'x055' : np.array([]),
'x056' : np.array([]),
'x057' : np.array([]),
'x058' : np.array([]),
'x059' : np.array([]),
'x060' : np.array([]),
'x061' : np.array([]),
'x062' : np.array([]),
'x063' : np.array([]),
'x064' : np.array([]),
'x065' : np.array([]),
'x066' : np.array([]),
'x067' : np.array([]),
'x068' : np.array([]),
'x069' : np.array([]),
'x070' : np.array([]),
'x071' : np.array([]),
'x072' : np.array([]),
'x073' : np.array([]),
'x074' : np.array([]),
'x075' : np.array([]),
'x076' : np.array([]),
'x077' : np.array([]),
'x078' : np.array([]),
'x079' : np.array([]),
'x080' : np.array([]),
'x081' : np.array([]),
'x082' : np.array([]),
'x083' : np.array([]),
'x084' : np.array([]),
'x085' : np.array([]),
'x086' : np.array([]),
'x087' : np.array([]),
'x088' : np.array([]),
'x089' : np.array([]),
'x090' : np.array([]),
'x091' : np.array([]),
'x092' : np.array([]),
'x093' : np.array([]),
'x094' : np.array([]),
'x095' : np.array([]),
'x096' : np.array([]),
'x097' : np.array([]),
'x098' : np.array([]),
'x099' : np.array([]),
'x100' : np.array([]),
'x101' : np.array([]),
'x102' : np.array([]),
'x103' : np.array([]),
'x104' : np.array([]),
'x105' : np.array([]),
'x106' : np.array([]),
'x107' : np.array([]),
'x108' : np.array([]),
'x109' : np.array([]),
'x110' : np.array([]),
'x111' : np.array([]),
'x112' : np.array([]),
'x113' : np.array([]),
'x114' : np.array([]),
'x115' : np.array([]),
'x116' : np.array([]),
'x117' : np.array([]),
'x118' : np.array([]),
'x119' : np.array([]),
'x120' : np.array([]),
'x121' : np.array([]),
'x122' : np.array([]),
'x123' : np.array([]),
'x124' : np.array([]),
'x125' : np.array([]),
'x126' : np.array([]),
'x127' : np.array([]),
'x128' : np.array([]),
'x129' : np.array([]),
'x130' : np.array([]),
'x131' : np.array([]),
'x132' : np.array([]),
'x133' : np.array([]),
'x134' : np.array([]),
'x135' : np.array([]),
'x136' : np.array([]),
'x137' : np.array([]),
'x138' : np.array([]),
'x139' : np.array([]),
'x140' : np.array([]),
'x141' : np.array([]),
'x142' : np.array([]),
'x143' : np.array([]),
'x144' : np.array([]),
'x145' : np.array([]),
'x146' : np.array([]),
'x147' : np.array([]),
'x148' : np.array([]),
'x149' : np.array([]),
'x150' : np.array([]),
'x151' : np.array([]),
'x152' : np.array([]),
'x153' : np.array([]),
'x154' : np.array([]),
'x155' : np.array([]),
'x156' : np.array([]),
'x157' : np.array([]),
'x158' : np.array([]),
'x159' : np.array([]),
'x160' : np.array([]),
'x161' : np.array([]),
'x162' : np.array([]),
'x163' : np.array([]),
'x164' : np.array([]),
'x165' : np.array([]),
'x166' : np.array([]),
'x167' : np.array([]),
'x168' : np.array([]),
'x169' : np.array([]),
'x170' : np.array([]),
'x171' : np.array([]),
'x172' : np.array([]),
'x173' : np.array([]),
'x174' : np.array([]),
'x175' : np.array([]),
'x176' : np.array([]),
'x177' : np.array([]),
'x178' : np.array([]),
'x179' : np.array([]),
'x180' : np.array([]),
'x181' : np.array([]),
'x182' : np.array([]),
'x183' : np.array([]),
'x184' : np.array([]),
'x185' : np.array([]),
'x186' : np.array([]),
'x187' : np.array([]),
'x188' : np.array([]),
'x189' : np.array([]),
'x190' : np.array([]),
'x191' : np.array([]),
'x192' : np.array([]),
'x193' : np.array([]),
'x194' : np.array([]),
'x195' : np.array([]),
'x196' : np.array([]),
'x197' : np.array([]),
'x198' : np.array([]),
'x199' : np.array([]),
'x200' : np.array([]),
'x201' : np.array([]),
'x202' : np.array([]),
'x203' : np.array([]),
'x204' : np.array([]),
'x205' : np.array([]),
'x206' : np.array([]),
'x207' : np.array([]),
'x208' : np.array([]),
'x209' : np.array([]),
'x210' : np.array([]),
'x211' : np.array([]),
'x212' : np.array([]),
'x213' : np.array([]),
'x214' : np.array([]),
'x215' : np.array([]),
'x216' : np.array([]),
'x217' : np.array([]),
'x218' : np.array([]),
'x219' : np.array([]),
'x220' : np.array([]),
'x221' : np.array([]),
'x222' : np.array([]),
'x223' : np.array([]),
'x224' : np.array([]),
'x225' : np.array([]),
'x226' : np.array([]),
'x227' : np.array([]),
'x228' : np.array([]),
'x229' : np.array([]),
'x230' : np.array([]),
'x231' : np.array([]),
'x232' : np.array([]),
'x233' : np.array([]),
'x234' : np.array([]),
'x235' : np.array([]),
'x236' : np.array([]),
'x237' : np.array([]),
'x238' : np.array([]),
'x239' : np.array([]),
'x240' : np.array([]),
'x241' : np.array([]),
'x242' : np.array([]),
'x243' : np.array([]),
'x244' : np.array([]),
'x245' : np.array([]),
'x246' : np.array([]),
'x247' : np.array([]),
'x248' : np.array([]),
'x249' : np.array([]),
'x250' : np.array([]),
'x251' : np.array([]),
'x252' : np.array([]),
'x253' : np.array([]),
'x254' : np.array([]),
'x255' : np.array([]),
'x256' : np.array([]),
'x257' : np.array([]),
'x258' : np.array([]),
'x259' : np.array([]),
'x260' : np.array([]),
'x261' : np.array([]),
'x262' : np.array([]),
'x263' : np.array([]),
'x264' : np.array([]),
'x265' : np.array([]),
'x266' : np.array([]),
'x267' : np.array([]),
'x268' : np.array([]),
'x269' : np.array([]),
'x270' : np.array([]),
'x271' : np.array([]),
'x272' : np.array([]),
'x273' : np.array([]),
'x274' : np.array([]),
'x275' : np.array([]),
'x276' : np.array([]),
'x277' : np.array([]),
'x278' : np.array([]),
'x279' : np.array([]),
'x280' : np.array([]),
'x281' : np.array([]),
'x282' : np.array([]),
'x283' : np.array([]),
'x284' : np.array([]),
'x285' : np.array([]),
'x286' : np.array([]),
'x287' : np.array([]),
'x288' : np.array([]),
'x289' : np.array([]),
'x290' : np.array([]),
'x291' : np.array([]),
'x292' : np.array([]),
'x293' : np.array([]),
'x294' : np.array([]),
'x295' : np.array([]),
'x296' : np.array([]),
'x297' : np.array([]),
'x298' : np.array([]),
'x299' : np.array([]),
'x300' : np.array([]),
'x301' : np.array([]),
'x302' : np.array([]),
'x303' : np.array([]),
'x304' : np.array([]),
'x305' : np.array([]),
'x306' : np.array([]),
'x307' : np.array([]),
'x308' : np.array([]),
'x309' : np.array([]),
'x310' : np.array([]),
'x311' : np.array([]),
'x312' : np.array([]),
'x313' : np.array([]),
'x314' : np.array([]),
'x315' : np.array([]),
'x316' : np.array([]),
'x317' : np.array([]),
'x318' : np.array([]),
'x319' : np.array([]),
'x320' : np.array([]),
'x321' : np.array([]),
'x322' : np.array([]),
'x323' : np.array([]),
'x324' : np.array([]),
'x325' : np.array([]),
'x326' : np.array([]),
'x327' : np.array([]),
'x328' : np.array([]),
}


class CURVATUREsolver_info(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('it', ctypes.c_int),
('it2opt', ctypes.c_int),
('res_eq', ctypes.c_double),
('res_ineq', ctypes.c_double),
('rsnorm', ctypes.c_double),
('rcompnorm', ctypes.c_double),
('pobj', ctypes.c_double),
('dobj', ctypes.c_double),
('dgap', ctypes.c_double),
('rdgap', ctypes.c_double),
('mu', ctypes.c_double),
('mu_aff', ctypes.c_double),
('sigma', ctypes.c_double),
('lsit_aff', ctypes.c_int),
('lsit_cc', ctypes.c_int),
('step_aff', ctypes.c_double),
('step_cc', ctypes.c_double),
('solvetime', ctypes.c_double),
('fevalstime', ctypes.c_double)
]

class FILE(ctypes.Structure):
        pass
if sys.version_info.major == 2:
    PyFile_AsFile = ctypes.pythonapi.PyFile_AsFile # problem here with python 3 http://stackoverflow.com/questions/16130268/python-3-replacement-for-pyfile-asfile
    PyFile_AsFile.argtypes = [ctypes.py_object]
    PyFile_AsFile.restype = ctypes.POINTER(FILE)

# determine data types for solver function prototype 
csolver.argtypes = ( ctypes.POINTER(CURVATUREsolver_params_ctypes), ctypes.POINTER(CURVATUREsolver_outputs_ctypes), ctypes.POINTER(CURVATUREsolver_info), ctypes.POINTER(FILE))
csolver.restype = ctypes.c_int

def CURVATUREsolver_solve(params_arg):
    '''
a Python wrapper for a fast solver generated by FORCESPRO v5.1.0

   OUTPUT = CURVATUREsolver_py.CURVATUREsolver_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['lb'] - column vector of length 2952
       PARAMS['ub'] - column vector of length 2952
       PARAMS['hu'] - column vector of length 656
       PARAMS['hl'] - column vector of length 656
       PARAMS['x0'] - column vector of length 2952
       PARAMS['all_parameters'] - column vector of length 7872

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['x001'] - column vector of size 9
       OUTPUT['x002'] - column vector of size 9
       OUTPUT['x003'] - column vector of size 9
       OUTPUT['x004'] - column vector of size 9
       OUTPUT['x005'] - column vector of size 9
       OUTPUT['x006'] - column vector of size 9
       OUTPUT['x007'] - column vector of size 9
       OUTPUT['x008'] - column vector of size 9
       OUTPUT['x009'] - column vector of size 9
       OUTPUT['x010'] - column vector of size 9
       OUTPUT['x011'] - column vector of size 9
       OUTPUT['x012'] - column vector of size 9
       OUTPUT['x013'] - column vector of size 9
       OUTPUT['x014'] - column vector of size 9
       OUTPUT['x015'] - column vector of size 9
       OUTPUT['x016'] - column vector of size 9
       OUTPUT['x017'] - column vector of size 9
       OUTPUT['x018'] - column vector of size 9
       OUTPUT['x019'] - column vector of size 9
       OUTPUT['x020'] - column vector of size 9
       OUTPUT['x021'] - column vector of size 9
       OUTPUT['x022'] - column vector of size 9
       OUTPUT['x023'] - column vector of size 9
       OUTPUT['x024'] - column vector of size 9
       OUTPUT['x025'] - column vector of size 9
       OUTPUT['x026'] - column vector of size 9
       OUTPUT['x027'] - column vector of size 9
       OUTPUT['x028'] - column vector of size 9
       OUTPUT['x029'] - column vector of size 9
       OUTPUT['x030'] - column vector of size 9
       OUTPUT['x031'] - column vector of size 9
       OUTPUT['x032'] - column vector of size 9
       OUTPUT['x033'] - column vector of size 9
       OUTPUT['x034'] - column vector of size 9
       OUTPUT['x035'] - column vector of size 9
       OUTPUT['x036'] - column vector of size 9
       OUTPUT['x037'] - column vector of size 9
       OUTPUT['x038'] - column vector of size 9
       OUTPUT['x039'] - column vector of size 9
       OUTPUT['x040'] - column vector of size 9
       OUTPUT['x041'] - column vector of size 9
       OUTPUT['x042'] - column vector of size 9
       OUTPUT['x043'] - column vector of size 9
       OUTPUT['x044'] - column vector of size 9
       OUTPUT['x045'] - column vector of size 9
       OUTPUT['x046'] - column vector of size 9
       OUTPUT['x047'] - column vector of size 9
       OUTPUT['x048'] - column vector of size 9
       OUTPUT['x049'] - column vector of size 9
       OUTPUT['x050'] - column vector of size 9
       OUTPUT['x051'] - column vector of size 9
       OUTPUT['x052'] - column vector of size 9
       OUTPUT['x053'] - column vector of size 9
       OUTPUT['x054'] - column vector of size 9
       OUTPUT['x055'] - column vector of size 9
       OUTPUT['x056'] - column vector of size 9
       OUTPUT['x057'] - column vector of size 9
       OUTPUT['x058'] - column vector of size 9
       OUTPUT['x059'] - column vector of size 9
       OUTPUT['x060'] - column vector of size 9
       OUTPUT['x061'] - column vector of size 9
       OUTPUT['x062'] - column vector of size 9
       OUTPUT['x063'] - column vector of size 9
       OUTPUT['x064'] - column vector of size 9
       OUTPUT['x065'] - column vector of size 9
       OUTPUT['x066'] - column vector of size 9
       OUTPUT['x067'] - column vector of size 9
       OUTPUT['x068'] - column vector of size 9
       OUTPUT['x069'] - column vector of size 9
       OUTPUT['x070'] - column vector of size 9
       OUTPUT['x071'] - column vector of size 9
       OUTPUT['x072'] - column vector of size 9
       OUTPUT['x073'] - column vector of size 9
       OUTPUT['x074'] - column vector of size 9
       OUTPUT['x075'] - column vector of size 9
       OUTPUT['x076'] - column vector of size 9
       OUTPUT['x077'] - column vector of size 9
       OUTPUT['x078'] - column vector of size 9
       OUTPUT['x079'] - column vector of size 9
       OUTPUT['x080'] - column vector of size 9
       OUTPUT['x081'] - column vector of size 9
       OUTPUT['x082'] - column vector of size 9
       OUTPUT['x083'] - column vector of size 9
       OUTPUT['x084'] - column vector of size 9
       OUTPUT['x085'] - column vector of size 9
       OUTPUT['x086'] - column vector of size 9
       OUTPUT['x087'] - column vector of size 9
       OUTPUT['x088'] - column vector of size 9
       OUTPUT['x089'] - column vector of size 9
       OUTPUT['x090'] - column vector of size 9
       OUTPUT['x091'] - column vector of size 9
       OUTPUT['x092'] - column vector of size 9
       OUTPUT['x093'] - column vector of size 9
       OUTPUT['x094'] - column vector of size 9
       OUTPUT['x095'] - column vector of size 9
       OUTPUT['x096'] - column vector of size 9
       OUTPUT['x097'] - column vector of size 9
       OUTPUT['x098'] - column vector of size 9
       OUTPUT['x099'] - column vector of size 9
       OUTPUT['x100'] - column vector of size 9
       OUTPUT['x101'] - column vector of size 9
       OUTPUT['x102'] - column vector of size 9
       OUTPUT['x103'] - column vector of size 9
       OUTPUT['x104'] - column vector of size 9
       OUTPUT['x105'] - column vector of size 9
       OUTPUT['x106'] - column vector of size 9
       OUTPUT['x107'] - column vector of size 9
       OUTPUT['x108'] - column vector of size 9
       OUTPUT['x109'] - column vector of size 9
       OUTPUT['x110'] - column vector of size 9
       OUTPUT['x111'] - column vector of size 9
       OUTPUT['x112'] - column vector of size 9
       OUTPUT['x113'] - column vector of size 9
       OUTPUT['x114'] - column vector of size 9
       OUTPUT['x115'] - column vector of size 9
       OUTPUT['x116'] - column vector of size 9
       OUTPUT['x117'] - column vector of size 9
       OUTPUT['x118'] - column vector of size 9
       OUTPUT['x119'] - column vector of size 9
       OUTPUT['x120'] - column vector of size 9
       OUTPUT['x121'] - column vector of size 9
       OUTPUT['x122'] - column vector of size 9
       OUTPUT['x123'] - column vector of size 9
       OUTPUT['x124'] - column vector of size 9
       OUTPUT['x125'] - column vector of size 9
       OUTPUT['x126'] - column vector of size 9
       OUTPUT['x127'] - column vector of size 9
       OUTPUT['x128'] - column vector of size 9
       OUTPUT['x129'] - column vector of size 9
       OUTPUT['x130'] - column vector of size 9
       OUTPUT['x131'] - column vector of size 9
       OUTPUT['x132'] - column vector of size 9
       OUTPUT['x133'] - column vector of size 9
       OUTPUT['x134'] - column vector of size 9
       OUTPUT['x135'] - column vector of size 9
       OUTPUT['x136'] - column vector of size 9
       OUTPUT['x137'] - column vector of size 9
       OUTPUT['x138'] - column vector of size 9
       OUTPUT['x139'] - column vector of size 9
       OUTPUT['x140'] - column vector of size 9
       OUTPUT['x141'] - column vector of size 9
       OUTPUT['x142'] - column vector of size 9
       OUTPUT['x143'] - column vector of size 9
       OUTPUT['x144'] - column vector of size 9
       OUTPUT['x145'] - column vector of size 9
       OUTPUT['x146'] - column vector of size 9
       OUTPUT['x147'] - column vector of size 9
       OUTPUT['x148'] - column vector of size 9
       OUTPUT['x149'] - column vector of size 9
       OUTPUT['x150'] - column vector of size 9
       OUTPUT['x151'] - column vector of size 9
       OUTPUT['x152'] - column vector of size 9
       OUTPUT['x153'] - column vector of size 9
       OUTPUT['x154'] - column vector of size 9
       OUTPUT['x155'] - column vector of size 9
       OUTPUT['x156'] - column vector of size 9
       OUTPUT['x157'] - column vector of size 9
       OUTPUT['x158'] - column vector of size 9
       OUTPUT['x159'] - column vector of size 9
       OUTPUT['x160'] - column vector of size 9
       OUTPUT['x161'] - column vector of size 9
       OUTPUT['x162'] - column vector of size 9
       OUTPUT['x163'] - column vector of size 9
       OUTPUT['x164'] - column vector of size 9
       OUTPUT['x165'] - column vector of size 9
       OUTPUT['x166'] - column vector of size 9
       OUTPUT['x167'] - column vector of size 9
       OUTPUT['x168'] - column vector of size 9
       OUTPUT['x169'] - column vector of size 9
       OUTPUT['x170'] - column vector of size 9
       OUTPUT['x171'] - column vector of size 9
       OUTPUT['x172'] - column vector of size 9
       OUTPUT['x173'] - column vector of size 9
       OUTPUT['x174'] - column vector of size 9
       OUTPUT['x175'] - column vector of size 9
       OUTPUT['x176'] - column vector of size 9
       OUTPUT['x177'] - column vector of size 9
       OUTPUT['x178'] - column vector of size 9
       OUTPUT['x179'] - column vector of size 9
       OUTPUT['x180'] - column vector of size 9
       OUTPUT['x181'] - column vector of size 9
       OUTPUT['x182'] - column vector of size 9
       OUTPUT['x183'] - column vector of size 9
       OUTPUT['x184'] - column vector of size 9
       OUTPUT['x185'] - column vector of size 9
       OUTPUT['x186'] - column vector of size 9
       OUTPUT['x187'] - column vector of size 9
       OUTPUT['x188'] - column vector of size 9
       OUTPUT['x189'] - column vector of size 9
       OUTPUT['x190'] - column vector of size 9
       OUTPUT['x191'] - column vector of size 9
       OUTPUT['x192'] - column vector of size 9
       OUTPUT['x193'] - column vector of size 9
       OUTPUT['x194'] - column vector of size 9
       OUTPUT['x195'] - column vector of size 9
       OUTPUT['x196'] - column vector of size 9
       OUTPUT['x197'] - column vector of size 9
       OUTPUT['x198'] - column vector of size 9
       OUTPUT['x199'] - column vector of size 9
       OUTPUT['x200'] - column vector of size 9
       OUTPUT['x201'] - column vector of size 9
       OUTPUT['x202'] - column vector of size 9
       OUTPUT['x203'] - column vector of size 9
       OUTPUT['x204'] - column vector of size 9
       OUTPUT['x205'] - column vector of size 9
       OUTPUT['x206'] - column vector of size 9
       OUTPUT['x207'] - column vector of size 9
       OUTPUT['x208'] - column vector of size 9
       OUTPUT['x209'] - column vector of size 9
       OUTPUT['x210'] - column vector of size 9
       OUTPUT['x211'] - column vector of size 9
       OUTPUT['x212'] - column vector of size 9
       OUTPUT['x213'] - column vector of size 9
       OUTPUT['x214'] - column vector of size 9
       OUTPUT['x215'] - column vector of size 9
       OUTPUT['x216'] - column vector of size 9
       OUTPUT['x217'] - column vector of size 9
       OUTPUT['x218'] - column vector of size 9
       OUTPUT['x219'] - column vector of size 9
       OUTPUT['x220'] - column vector of size 9
       OUTPUT['x221'] - column vector of size 9
       OUTPUT['x222'] - column vector of size 9
       OUTPUT['x223'] - column vector of size 9
       OUTPUT['x224'] - column vector of size 9
       OUTPUT['x225'] - column vector of size 9
       OUTPUT['x226'] - column vector of size 9
       OUTPUT['x227'] - column vector of size 9
       OUTPUT['x228'] - column vector of size 9
       OUTPUT['x229'] - column vector of size 9
       OUTPUT['x230'] - column vector of size 9
       OUTPUT['x231'] - column vector of size 9
       OUTPUT['x232'] - column vector of size 9
       OUTPUT['x233'] - column vector of size 9
       OUTPUT['x234'] - column vector of size 9
       OUTPUT['x235'] - column vector of size 9
       OUTPUT['x236'] - column vector of size 9
       OUTPUT['x237'] - column vector of size 9
       OUTPUT['x238'] - column vector of size 9
       OUTPUT['x239'] - column vector of size 9
       OUTPUT['x240'] - column vector of size 9
       OUTPUT['x241'] - column vector of size 9
       OUTPUT['x242'] - column vector of size 9
       OUTPUT['x243'] - column vector of size 9
       OUTPUT['x244'] - column vector of size 9
       OUTPUT['x245'] - column vector of size 9
       OUTPUT['x246'] - column vector of size 9
       OUTPUT['x247'] - column vector of size 9
       OUTPUT['x248'] - column vector of size 9
       OUTPUT['x249'] - column vector of size 9
       OUTPUT['x250'] - column vector of size 9
       OUTPUT['x251'] - column vector of size 9
       OUTPUT['x252'] - column vector of size 9
       OUTPUT['x253'] - column vector of size 9
       OUTPUT['x254'] - column vector of size 9
       OUTPUT['x255'] - column vector of size 9
       OUTPUT['x256'] - column vector of size 9
       OUTPUT['x257'] - column vector of size 9
       OUTPUT['x258'] - column vector of size 9
       OUTPUT['x259'] - column vector of size 9
       OUTPUT['x260'] - column vector of size 9
       OUTPUT['x261'] - column vector of size 9
       OUTPUT['x262'] - column vector of size 9
       OUTPUT['x263'] - column vector of size 9
       OUTPUT['x264'] - column vector of size 9
       OUTPUT['x265'] - column vector of size 9
       OUTPUT['x266'] - column vector of size 9
       OUTPUT['x267'] - column vector of size 9
       OUTPUT['x268'] - column vector of size 9
       OUTPUT['x269'] - column vector of size 9
       OUTPUT['x270'] - column vector of size 9
       OUTPUT['x271'] - column vector of size 9
       OUTPUT['x272'] - column vector of size 9
       OUTPUT['x273'] - column vector of size 9
       OUTPUT['x274'] - column vector of size 9
       OUTPUT['x275'] - column vector of size 9
       OUTPUT['x276'] - column vector of size 9
       OUTPUT['x277'] - column vector of size 9
       OUTPUT['x278'] - column vector of size 9
       OUTPUT['x279'] - column vector of size 9
       OUTPUT['x280'] - column vector of size 9
       OUTPUT['x281'] - column vector of size 9
       OUTPUT['x282'] - column vector of size 9
       OUTPUT['x283'] - column vector of size 9
       OUTPUT['x284'] - column vector of size 9
       OUTPUT['x285'] - column vector of size 9
       OUTPUT['x286'] - column vector of size 9
       OUTPUT['x287'] - column vector of size 9
       OUTPUT['x288'] - column vector of size 9
       OUTPUT['x289'] - column vector of size 9
       OUTPUT['x290'] - column vector of size 9
       OUTPUT['x291'] - column vector of size 9
       OUTPUT['x292'] - column vector of size 9
       OUTPUT['x293'] - column vector of size 9
       OUTPUT['x294'] - column vector of size 9
       OUTPUT['x295'] - column vector of size 9
       OUTPUT['x296'] - column vector of size 9
       OUTPUT['x297'] - column vector of size 9
       OUTPUT['x298'] - column vector of size 9
       OUTPUT['x299'] - column vector of size 9
       OUTPUT['x300'] - column vector of size 9
       OUTPUT['x301'] - column vector of size 9
       OUTPUT['x302'] - column vector of size 9
       OUTPUT['x303'] - column vector of size 9
       OUTPUT['x304'] - column vector of size 9
       OUTPUT['x305'] - column vector of size 9
       OUTPUT['x306'] - column vector of size 9
       OUTPUT['x307'] - column vector of size 9
       OUTPUT['x308'] - column vector of size 9
       OUTPUT['x309'] - column vector of size 9
       OUTPUT['x310'] - column vector of size 9
       OUTPUT['x311'] - column vector of size 9
       OUTPUT['x312'] - column vector of size 9
       OUTPUT['x313'] - column vector of size 9
       OUTPUT['x314'] - column vector of size 9
       OUTPUT['x315'] - column vector of size 9
       OUTPUT['x316'] - column vector of size 9
       OUTPUT['x317'] - column vector of size 9
       OUTPUT['x318'] - column vector of size 9
       OUTPUT['x319'] - column vector of size 9
       OUTPUT['x320'] - column vector of size 9
       OUTPUT['x321'] - column vector of size 9
       OUTPUT['x322'] - column vector of size 9
       OUTPUT['x323'] - column vector of size 9
       OUTPUT['x324'] - column vector of size 9
       OUTPUT['x325'] - column vector of size 9
       OUTPUT['x326'] - column vector of size 9
       OUTPUT['x327'] - column vector of size 9
       OUTPUT['x328'] - column vector of size 9

   [OUTPUT, EXITFLAG] = CURVATUREsolver_py.CURVATUREsolver_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = CURVATUREsolver_py.CURVATUREsolver_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.rsnorm    - norm of stationarity condition
       INFO.rcompnorm    - max of all complementarity violations
       INFO.pobj      - primal objective
       INFO.mu        - duality measure
       INFO.solvetime - Time needed for solve (wall clock time)
       INFO.fevalstime - Time needed for function evaluations (wall clock time)

 See also COPYING

    '''
    global _lib

    # convert parameters
    params_py = CURVATUREsolver_params_ctypes()
    for par in params_arg:
        try:
            #setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='A')))
            if isinstance(getattr(params_py, par), ctypes.Array):
                params_arg[par] = np.require(params_arg[par], dtype=CURVATUREsolver_params_types[par], requirements='F')
                setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='F')))
            else:
                setattr(params_py, par, params_arg[par])
        except:
            raise ValueError('Parameter ' + par + ' does not have the appropriate dimensions or data type. Please use numpy arrays for parameters.')
    
    outputs_py = CURVATUREsolver_outputs_ctypes()
    info_py = CURVATUREsolver_info()
    if sys.version_info.major == 2:
        if sys.platform.startswith('win'):
            fp = None # if set to none, the solver prints to stdout by default - necessary because we have an access violation otherwise under windows
        else:
            #fp = open('stdout_temp.txt','w')
            fp = sys.stdout
        try:
            PyFile_AsFile.restype = ctypes.POINTER(FILE)
            exitflag = _lib.CURVATUREsolver_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), PyFile_AsFile(fp) , _lib.CURVATUREsolver_casadi2forces )
            #fp = open('stdout_temp.txt','r')
            #print (fp.read())
            #fp.close()
        except:
            #print 'Problem with solver'
            raise
    elif sys.version_info.major == 3:
        if sys.platform.startswith('win'):
            libc = ctypes.cdll.msvcrt
        elif sys.platform.startswith('darwin'):
            libc = ctypes.CDLL('libc.dylib')
        else:
            libc = ctypes.CDLL('libc.so.6')       # Open libc
        cfopen = getattr(libc,'fopen')        # Get its fopen
        cfopen.restype = ctypes.POINTER(FILE) # Yes, fopen gives a file pointer
        cfopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p] # Yes, fopen gives a file pointer 
        fp = cfopen('stdout_temp.txt'.encode('utf-8'),'w'.encode('utf-8'))    # Use that fopen 

        try:
            if sys.platform.startswith('win'):
                exitflag = _lib.CURVATUREsolver_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), None , _lib.CURVATUREsolver_casadi2forces)
            else:
                exitflag = _lib.CURVATUREsolver_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), fp , _lib.CURVATUREsolver_casadi2forces)
            libc.fclose(fp)
            fptemp = open('stdout_temp.txt','r')
            print (fptemp.read())
            fptemp.close()            
        except:
            #print 'Problem with solver'
            raise

    # convert outputs
    for out in CURVATUREsolver_outputs:
        CURVATUREsolver_outputs[out] = npct.as_array(getattr(outputs_py,out))

    return CURVATUREsolver_outputs,int(exitflag),info_py

solve = CURVATUREsolver_solve


